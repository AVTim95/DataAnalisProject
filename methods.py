import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import seaborn as sns
import numpy as np
import scipy


def analyze(df: pd.DataFrame):
    print(df.head())
    # DEPARTURE CITY - город отправления
    # DEPARTURE STATE - штат отправления
    # DEPARTURE CARRIER - перевозчик при отправлении
    # ARRIVAL CITY - город прибытия
    # ARRIVAL STATE - штат прибытия
    # ARRIVAL CARRIER - перевозчик при прибытии
    # RAIL SPEED SPEED - скорость движения поезда по рельсам
    # RAIL CAR TYPE TYPE - тип поезда
    # RAIL OWNERSHIP OWNERSHIP - владелец железной дороги
    # RAIL CARLOAD LOAD - загруженность вагонов
    # DEPARTURE DATE - дата отправления
    # ARRIVAL DATE - дата прибытия
    # CAR VALUE - цена поезда
    # DAMAGED - износ поезда
    # WEIGHT - вес поезда
    # FUEL USED - потребление топлива
    # PROPER DESTINATION - целевой пункт назначения
    # MILES - пройденный путь в милях
    # OF STOPS - число остановок

    # Типы столбцов
    print(df.dtypes)
    # В датасете о поездах 10321 наблюдений и 19 параметров.
    # Среди них есть строковые, целочисленные и вещественные типы.

    # Узнаём кол-во данных, основные статистические характеристики
    # данных: средние значения, дисперсии, минимумы, максимумы и квартили
    print(df.describe())
    # Для потребления топлива следующие основные характеристики:
    # mean(среднее) 41.339406
    # std(стандартное отклонение) 11.52914
    # min(минимум) 18.904175
    # 25 % (0.25 квартиль) 31.795090
    # 50 % (0.5 квантиль) 41.003229
    # 75 % (0.75 квартиль) 50.216322
    # max(максимум) 69.94135

    print(df.notnull().sum())
    # Все данные полные, пропусков нет


def visualization(df: pd.DataFrame):
    # Гистограмма потребления топлива
    df['FUEL USED'].plot.hist(bins=50)
    plt.show()
    # Расход поездов, примерно, от 20 литров дизельного топлива до 70

    # Видно, что средний потребление топлива ~ 40 литров дизельного топлива
    # выбросов не видно, значит все поезда нормальные, среди них тех, которые
    # потребляют заметно больше других(поезда исправны, утечек нет)
    sns.boxplot(df['FUEL USED'])
    plt.show()

    # Так можно найти коррелирующие признаки
    sns.pairplot(df)
    plt.show()

    # Потребленное топлива и вес поезда вполне коррелируют, очевидно, чем больше груза
    # требуется вести, тем больше топлива прийдется потратить. Прямо пропорциональная зависимость.
    plt.plot(df['FUEL USED'], df['WEIGHT'], '.')
    plt.show()
    # Однако можно заметить, что чем больший вес поезда, тем больше разброс потребления
    # топлива. Возможно, это связано с тем, что во время движения на одной скорости, расход
    # не велик, ведь поезд движется по инерции, но поскольку поезда обязательно будут менять скорость
    # появляется разброс, который более заметен для тяжелых поездов, т.к. разогнать тяжелый
    # поезд значительно сложнее.
    # Также видно, что масса некоторых поездов - 0, вероятно, это и есть пропуски.


def hypothesis(df: pd.DataFrame):
    # Визуализируя данные, я заметил, что гистограмма потребления топлива поездов похожа на нормальное распределение
    # Теперь я хочу проверить, что среднее потребление топлива равно 40 литрам дизельного топлива с уровнем доверия 95%
    # H0: µ = 40(средний потребление топлива равно 40)
    # H1: µ ≠ 40(средний потребление топлива не равно 40)
    # альфа = 0,05
    stat = scipy.stats.ttest_1samp(a=df['FUEL USED'], popmean=40)
    print(stat.pvalue)
    # В результате t-теста pvalue оказался гораздо меньше, чем альфа, значит мы отвергаем нулевую гипотезу

    stat = scipy.stats.ttest_1samp(a=df['FUEL USED'], popmean=41.5)
    print(stat.pvalue)
    # Оказалась, с учетом выбранного альфа, среднее потребление равно 41.5 литрам


def machine_learning(df: pd.DataFrame):
    # Предположим, у меня есть поезда с грузом, масса поездов сильно отличается,
    # ведь они загружены совершенно разным грузом.
    # Я хочу заранее знать, сколько примерно стоит очередная поездка, чтобы выделить столько денег,
    # сколько необходимо, а не столько, сколько скажет закупщик. Обучу модель, которая по весу поезда предскажет,
    # сколько требуется топлива. Я буду использовать линейную регрессию, ведь признаки линейно зависимы.

    # Подготавливаю данные
    df = df[df['WEIGHT'] > 10]
    X = np.array(df['WEIGHT']).reshape(-1, 1)
    y = np.array(df['FUEL USED']).reshape(-1, 1)

    # Разбиваю на обучающую и тестовую выборку, 10% данных на тестирование
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=0)

    Lin_Reg = LinearRegression()
    lin_reg = Lin_Reg.fit(X_train, y_train)
    # Модель обучена, протестирую ее, наложив предсказания на истинные данные

    plt.plot(X, y, 'r.')
    plt.plot(X_test, lin_reg.predict(X_test))
    plt.show()
    # Линия предсказаний проходит ровно по центру истинных значений, значит модель обучена верно
    # Теперь, если мне скажут, что для доставки требуется 50 литров топлива, а модель предскажет 30
    # литров, у меня будут основания думать, что меня обманывают.
